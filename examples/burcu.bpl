procedure {:async} syntaxDemo()
{
    var x: int;
    var y: int;
    
    var t1: task;
    var t2: task;
    
    call x := blah(y);
    call {:async} t1 := someAsyncProc(1);
    call {:async} t2 := someOtherProc(2);
    
    // ignore the result of t2
    assume {:wait t2} true;
    
    // store the result of t1 in x
    assume {:wait t1, x} true;
    
    return;
}

procedure {:async} processRequests()
{
    var req1: task;
    var req2: task;
    var req3: task;
    var deletedIm: int;
    
    // set gallery to 1 2 3
    call {:async} req1 := loadGalleryAsync(1);

    // 2 should be deleted
    call {:async} req2 := deleteImageAsync(1);

    // gallery is set to 4 5 6
    call {:async} req3 := loadGalleryAsync(2);
        
    assume {:wait req1} true;
    assume {:wait req2, deletedIm} true;
    assume {:wait req3} true;
    
    // intended to delete 2, but may have actually deleted 5.
    assert deletedIm == 2;

    return;
}

procedure {:async} loadGalleryAsync(i: int)
    returns (t:task)
{
    assume {:run loadGallery, i, t} true;

    call t := Task.Run(loadGallery, i);
    assume {:await t} true;
    return;
}

procedure loadGallery(i: int)
{
    call gallery.Clear();
    call gallery.Add(3*i);
    call gallery.Add(3*i+1);
    call gallery.Add(3*i+2);
    return;
}

procedure Task.Run(fn: int, i: int)
{
    if (fn == loadGallery) {
        call loadGallery(i);

    } else {
        // ...
    }
    return;
}